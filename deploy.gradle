apply plugin: 'maven-publish'
apply plugin: 'signing'

ext {
    isReleaseVersion = !(project.version =~ /-SNAPSHOT$/)
    isNeedSign = System.getenv('GPG_ID') && isReleaseVersion
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allJava
    archiveClassifier.set('sources')
}

task javadocJar(type: Jar) {
    from javadoc
    archiveClassifier.set('javadoc')
}

publishing {
    publications {
        mavenJava(MavenPublication) {

            from components.java
            artifact sourcesJar
            artifact javadocJar

            pom {
                name = 'INWX Domrobot Java Client'
                description = 'INWX Domrobot Java Client'
                url = 'https://github.com/inwx/java-client'
                licenses {
                    license {
                        name = 'MIT License'
                        url = 'http://www.opensource.org/licenses/mit-license.php'
                        distribution = 'repo'
                    }
                }
                developers {
                    developer {
                        id = 'developer-inwx'
                        name = 'INWX Developer'
                        email = 'developer@inwx.de'
                        organization = 'INWX GmbH & Co. KG'
                        organizationUrl = 'https://www.inwx.com/en/'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/inwx/java-client.git'
                    developerConnection = 'scm:git:ssh@github.com:inwx/java-client.git'
                    url = 'https://github.com/inwx/java-client'
                }
            }
        }
    }
    repositories {
        maven {
            credentials {
                username System.getenv('OSSRH_USER') ?: $OSSRH_USER
                password System.getenv('OSSRH_PASS') ?: $OSSRH_PASS
            }
            if (project.ext.isReleaseVersion) {
                url "https://oss.sonatype.org/service/local/staging/deploy/maven2"
            } else {
                url "https://oss.sonatype.org/content/repositories/snapshots"
            }
        }
    }

    signing {
        required { project.ext.isNeedSign }
        def signingKey = System.getenv('GPG_PRIVATE_KEY') ?: $GPG_PRIVATE_KEY
        def signingPassword = System.getenv('GPG_PASSWORD') ?: $GPG_PASSWORD
        useInMemoryPgpKeys(signingKey, signingPassword)
        sign publishing.publications.mavenJava
    }
}
